use std::collections::HashSet;

fn is_valid_sudoku(board: &[Vec<char>]) -> bool {
    for i in 0..9 {
        let mut row = HashSet::new();
        let mut col = HashSet::new();
        for j in 0..9 {
            let r = board[i][j];
            let c = board[j][i];
            if r != '.' && !row.insert(r) {
                return false;
            }
            if c != '.' && !col.insert(c) {
                return false;
            }
        }
    }

    for box_row in (0..9).step_by(3) {
        for box_col in (0..9).step_by(3) {
            let mut box_set = HashSet::new();
            for i in 0..3 {
                for j in 0..3 {
                    let val = board[box_row + i][box_col + j];
                    if val != '.' && !box_set.insert(val) {
                        return false;
                    }
                }
            }
        }
    }

    true
}

fn print_board(board: &[Vec<char>]) {
    for row in board {
        for &c in row {
            print!("{} ", c);
        }
        println!();
    }
}

fn main() {
    let valid1 = vec![
        vec!['5','3','.','.','7','.','.','.','.'],
        vec!['6','.','.','1','9','5','.','.','.'],
        vec!['.','9','8','.','.','.','.','6','.'],
        vec!['8','.','.','.','6','.','.','.','3'],
        vec!['4','.','.','8','.','3','.','.','1'],
        vec!['7','.','.','.','2','.','.','.','6'],
        vec!['.','6','.','.','.','.','2','8','.'],
        vec!['.','.','.','4','1','9','.','.','5'],
        vec!['.','.','.','.','8','.','.','7','9'],
    ];

    let valid2 = vec![
        vec!['8','.','.','.','.','.','.','.','.'],
        vec!['.','.','3','6','.','.','.','.','.'],
        vec!['.','7','.','.','9','.','2','.','.'],
        vec!['.','5','.','.','.','7','.','.','.'],
        vec!['.','.','.','.','4','5','7','.','.'],
        vec!['.','.','.','1','.','.','.','3','.'],
        vec!['.','.','1','.','.','.','.','6','8'],
        vec!['.','.','8','5','.','.','.','1','.'],
        vec!['.','9','.','.','.','.','4','.','.'],
    ];

    let invalid_row = vec![
        vec!['5','3','.','.','7','.','.','.','5'],
        vec!['6','.','.','1','9','5','.','.','.'],
        vec!['.','9','8','.','.','.','.','6','.'],
        vec!['8','.','.','.','6','.','.','.','3'],
        vec!['4','.','.','8','.','3','.','.','1'],
        vec!['7','.','.','.','2','.','.','.','6'],
        vec!['.','6','.','.','.','.','2','8','.'],
        vec!['.','.','.','4','1','9','.','.','5'],
        vec!['.','.','.','.','8','.','.','7','9'],
    ];

    let invalid_box = vec![
        vec!['5','3','6','.','7','.','.','.','.'],
        vec!['6','.','.','1','9','5','.','.','.'],
        vec!['.','9','8','.','.','.','.','6','.'],
        vec!['8','.','.','.','6','.','.','.','3'],
        vec!['4','.','.','8','.','3','.','.','1'],
        vec!['7','.','.','.','2','.','.','.','6'],
        vec!['.','6','.','.','.','.','2','8','.'],
        vec!['.','.','.','4','1','9','.','.','5'],
        vec!['.','.','.','.','8','.','.','7','9'],
    ];

    let test_cases = vec![
        ("Valid Board 1", valid1),
        ("Valid Board 2", valid2),
        ("Invalid Board (Row)", invalid_row),
        ("Invalid Board (Box)", invalid_box),
    ];

    for (name, board) in test_cases {
        println!("{}:", name);
        print_board(&board);
        println!("Is valid: {}", is_valid_sudoku(&board));
        println!("----------------------------------------");
    }
}
